<?php

namespace Bin\Controllers\Web;

use Bin\Models\User;
use Snake\Core\Http\Request;
use Bin\Controllers\Controller;
use Snake\Core\Http\Validator;

class UserController extends Controller {
  /**
   * Display a listing of the resource.
   *
   * @return void
   */
  public function index() {
    $users = User::all();
    $username = session()->get('user')['username'];

    static::view('pages.admin.user.index', [
      'users' => $users,
      'username' => $username
    ]);
  }

  /**
  * Show the form for creating a new resource.
  *
  * @return void
  */
  public function create() {
    static::view('pages.admin.user.create');
  }

  /**
   * Store a newly created resource in storage.
   *
   * @return void
   */
  public function store(Request $request) {
    $form = Validator::make($request->all(), [
      'name' => ['required', 'str', 'max:255'],
      'username' => ['required', 'str', 'max:255'],
      'role' => ['required', 'str', 'max:255'],
      'password' => ['required', 'str', 'max:255'],
      'password_confirmation' => ['required', 'str', 'max:255']
    ]);

    input_set_old('name', $form->get('name'));
    input_set_old('username', $form->get('username'));
    if (input_exists('role')) input_set_old('role', $form->get('role'));
    input_set_old('password', $form->get('password'));
    input_set_old('password_confirmation', $form->get('password_confirmation'));

    if ($form->fails()) return static::view('pages.admin.user.create', [
      'error_form' => $form->failed()
    ]);

    if (!in_array($form->get('role'), ['USER', 'ADMIN'])) {
      return static::view('pages.admin.user.create', [
        'error_form' => [
          'role' => 'Role tidak valid'
        ]
      ]);
    }

    if ($form->get('password') != $form->get('password_confirmation')) {
      return static::view('pages.admin.user.create', [
        'error_form' => [
          'password' => 'Password konfirmasi tidak sama',
          'password_confirmation' => 'Password konfirmasi tidak sama'
        ]
      ]);
    }

    User::query("insert into users (name, username, role, password) values ('" . $form->get('name') . "', '" . $form->get('username') . "', '" . $form->get('role') . "', '" . $form->get('password') . "')");

    input_delete_old('name');
    input_delete_old('username');
    if (input_old('role')) input_delete_old('role');
    input_delete_old('password');
    input_delete_old('password_confirmation');

    redirect('/admin/user');
  }

  /**
   * Show the form for editing the specified resource.
   *
   * @return void
   */
  public function edit(Request $request) {
    $id = $request->get('id');

    if (empty($id)) return static::view('pages.admin.user.index', [
      'error' => 'ID tidak boleh kosong'
    ]);

    $data = User::query("select * from users where id = '" . $id . "'")->fetch();

    if (empty($data)) return static::view('pages.admin.user.index', [
      'error' => 'User not found'
    ]);

    static::view('pages.admin.user.edit', [
      'user' => $data
    ]);
  }

  /**
   * Update the specified resource in storage.
   *
   * @return void
   */
  public function update(Request $request) {
    $id = $request->get('id');

    if (empty($id)) return static::view('pages.admin.user.index', [
      'error' => 'ID tidak boleh kosong'
    ]);

    $form = Validator::make($request->all(), [
      'name' => ['required', 'str', 'max:255'],
      'username' => ['required', 'str', 'max:255'],
      'role' => ['required', 'str', 'max:255'],
      'password' => ['str', 'max:255']
    ]);

    if ($form->fails()) return static::view('pages.admin.user.edit', [
      'user' => $request->all(),
      'error_form' => $form->failed()
    ]);

    $data = User::query("select * from users where id = '" . $id . "'")->fetch();

    if (empty($data)) return static::view('pages.admin.user.index', [
      'error' => 'User not found'
    ]);

    $update = null;
    $role = strtolower($form->get('role'));

    if (!empty($form->get('password'))) {
      $update = User::query("update users set name = '" . $form->get('name') . "', username = '" . $form->get('username') . "', role = '" . $role . "', password = '" . $form->get('password') . "' where id = '" . $id . "'");
    } else {
      $update = User::query("update users set name = '" . $form->get('name') . "', username = '" . $form->get('username') . "', role = '" . $role . "' where id = '" . $id . "'");
    }

    if (!$update) return static::view('pages.admin.user.index', [
      'error' => 'Failed to update user'
    ]);

    redirect('/admin/user');
  }

  /**
   * Remove the specified resource from storage.
   *
   * @return void
   */
  public function destroy(Request $request) {
    $id = $request->get('id');

    if (empty($id)) return static::view('pages.admin.user.index', [
      'error' => 'ID tidak boleh kosong'
    ]);

    User::query("delete from users where id = " . $id);

    redirect('/admin/user');
  }
}
