<?php

namespace Bin\Controllers\Web;

use Bin\Models\User;
use Snake\Core\Http\Request;
use Bin\Controllers\Controller;
use Snake\Core\Http\Validator;

class ProfileController extends Controller {
  /**
   * Display a listing of the resource.
   *
   * @return void
   */
  public function index(Request $request, $error = null) {
    $user = $request->get('id');

    if ($error) return static::view('pages.profile.index', [
      'error' => $error
    ]);

    $data = User::query("select * from users where id = '" . $user . "'")->fetch();

    if (empty($data)) return static::view('pages.profile.index', [
      'error' => 'User not found'
    ]);

    static::view('pages.profile.index', [
      'data' => $data
    ]);
  }

  /**
   * Update the specified resource in storage.
   *
   * @param  \Snake\Core\Http\Request  $request
   * @return void
   */
  public function update(Request $request) {
    $id = $request->get('id');

    // Get the input
    $form = Validator::make($request->all(), [
      'name' => ['required', 'str', 'max:255'],
      'username' => ['required', 'str', 'max:255'],
      'password' => ['str', 'max:255']
    ]);

    input_set_old('name', $form->get('name'));
    input_set_old('username', $form->get('username'));
    if (input_exists('password')) input_set_old('password', $form->get('password'));

    if ($form->fails()) return static::view('pages.profile.index', [
      'error_form' => $form->failed()
    ]);

    $data = User::query("select * from users where id = '" . $id . "'")->fetch();

    if (empty($data)) return static::view('pages.profile.index', [
      'error' => 'User not found'
    ]);

    $update = null;

    if (!empty($password)) {
      $update = User::query("update users set name = '" . $form->get('name') . "', username = '" . $form->get('username') . "', password = '" . $form->get('password') . "' where id = '" . $id . "'");
    } else {
      $update = User::query("update users set name = '" . $form->get('name') . "', username = '" . $form->get('username') . "' where id = '" . $id . "'");
    }

    if (!$update) return $this->index($request, 'Failed to update user');

    $bypass = true;

    if (session()->exists('user')) {
      session()->regenerate();
      session()->set('user', [
        'id' => $id,
        'name' => $form->get('name'),
        'username' => $form->get('username'),
        'password' => $form->get('password') ?? $data['password']
      ]);

      $bypass = false;
    }

    input_delete_old('name');
    input_delete_old('username');
    if (input_exists('password')) input_delete_old('password');

    static::view('pages.landing', [
      'is_logged_in' => session()->exists('user'),
      'bypass' => $bypass,
      'type' => 'bac'
    ]);
  }
}
