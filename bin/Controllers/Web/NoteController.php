<?php

namespace Bin\Controllers\Web;

use Bin\Models\Note;
use Snake\Core\Http\Request;
use Bin\Controllers\Controller;
use Snake\Core\Http\Validator;

class NoteController extends Controller {
  /**
   * Display a listing of the resource.
   *
   * @return void
   */
  public function index(Request $request) {
    $user = session()->exists('user') ? session()->get('user')['id'] : $request->get('id');

    $data = Note::query("select * from notes where user_id = '" . $user . "'")->fetchAll();

    if (empty($data)) $data = null;

    static::view('pages.admin.notes.index', [
      'username' => session()->get('user')['username'],
      'notes' => $data
    ]);
  }

  /**
  * Show the form for creating a new resource.
  */
  public function create() {
    static::view('pages.admin.notes.create');
  }

  /**
   * Store a newly created resource in storage.
   *
   * @return void
   */
  public function store(Request $request) {
    $form = Validator::make($request->all(), [
      'title' => ['required', 'str', 'max:255'],
      'content' => ['required', 'str']
    ]);

    input_set_old('title', input('title'));
    input_set_old('content', input('content'));

    if ($form->fails()) return static::view('pages.admin.notes.create', [
      'error_form' => $form->failed()
    ]);

    $user = session()->exists('user') ? session()->get('user')['id'] : $request->get('id');

    if (empty($user)) return static::view('pages.admin.notes.create', [
      'error' => 'Something went wrong, please try again later.'
    ]);

    Note::query("insert into notes (title, content, user_id) values ('" . $form->get('title') . "', '" . $form->get('content') . "', '" . $user . "')");

    input_delete_old('title');
    input_delete_old('content');

    redirect('/admin/note');
  }

  /**
   * Show the form for editing the specified resource.
   *
   * @return void
   */
  public function edit(Request $request) {
    $id = $request->get('id');

    if (empty($id)) return static::view('pages.admin.notes.index', [
      'error' => 'ID tidak boleh kosong'
    ]);

    $data = Note::query("select * from notes where id = " . $id)->fetch();

    if (empty($data)) return static::view('pages.admin.notes.index', [
      'error' => 'Data not found'
    ]);

    static::view('pages.admin.notes.edit', [
      'note' => $data
    ]);
  }

  /**
   * Update the specified resource in storage.
   *
   * @return void
   */
  public function update(Request $request) {
    $form = Validator::make($request->all(), [
      'id' => ['required', 'int'],
      'title' => ['required', 'str', 'max:255'],
      'content' => ['required', 'str']
    ]);

    if ($form->fails()) return static::view('pages.admin.notes.edit', [
      'note' => $request->all(),
      'error_form' => $form->failed()
    ]);

    $data = Note::query("select id from notes where id = " . $form->get('id'))->fetch();

    if (empty($data)) return static::view('pages.admin.notes.index', [
      'error' => 'Data not found'
    ]);

    Note::query("update notes set title = '" . $form->get('title') . "', content = '" . $form->get('content') . "' where id = " . $form->get('id'));

    redirect('/admin/note');
  }

  /**
   * Remove the specified resource from storage.
   *
   * @return void
   */
  public function destroy(Request $request) {
    $id = $request->get('id');

    if (empty($id)) return static::view('pages.admin.notes.index', [
      'error' => 'ID tidak boleh kosong'
    ]);

    Note::query("delete from notes where id = " . $id);

    redirect('/admin/note');
  }
}
